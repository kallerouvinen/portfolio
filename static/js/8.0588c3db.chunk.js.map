{"version":3,"sources":["components/sections/section4/SubmitButton.tsx","components/sections/section4/TextAreaInput.tsx","components/sections/section4/TextInput.tsx","components/sections/section4/Section4.tsx"],"names":["errorAnim","keyframes","Container","styled","div","theme","state","success","error","color4","main","disabled","css","dark","StyledSubmit","input","StyledLabel","label","position","SubmitButton","props","htmlFor","type","id","value","InputContainer","Label","TextArea","textarea","TextAreaInput","name","rows","otherProps","Input","TextInput","Root","MUIContainer","Title","h1","Paragraph","p","ErrorText","RecaptchaContainer","SubmitContainer","Grid","Section4","useState","loadingState","setLoadingState","sendMessageFailed","setSendMessageFailed","recaptchaRef","useRef","maxWidth","initialValues","email","message","recaptcha","validateOnBlur","validateOnChange","validate","values","errors","test","onSubmit","resetForm","emailjs","send","then","result","setTimeout","current","reset","touched","handleChange","handleSubmit","setFieldValue","autoComplete","className","container","spacing","item","xs","sm","onChange","ref","sitekey","response"],"mappings":"qMAYMA,EAAYC,YAAH,wQASTC,EAAYC,IAAOC,IAAV,+TAWO,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,MACR,YAAVA,EACID,EAAME,QACI,UAAVD,EACAD,EAAMG,MACNH,EAAMI,OAAOC,QACjB,gBAAGC,EAAH,EAAGA,SAAUN,EAAb,EAAaA,MAAb,OACCM,GACDC,YADA,0HAGwBP,EAAMI,OAAOI,SAKrC,kBACU,UADV,EAAGP,OAEHM,YADA,wEAEoBZ,MAIlBc,EAAeX,IAAOY,MAAV,iKAUZC,EAAcb,IAAOc,MAAV,mMAMS,qBAAGC,YA4CdC,I,MAAAA,EApCf,SAAsBC,GAAe,IAAD,EACYA,EAAtCT,gBAD0B,WACYS,EAApBd,aADQ,MACA,QADA,EAGlC,OACE,eAAC,EAAD,CAAWA,MAAOA,EAAOK,SAAUA,EAAnC,UACE,cAACK,EAAD,CACEE,SAAoB,UAAVZ,EAAoB,MAAQ,QACtCe,QAAQ,SAFV,kBAMA,cAACL,EAAD,CACEE,SACY,UAAVZ,EAAoB,OAAmB,YAAVA,EAAsB,MAAQ,QAE7De,QAAQ,SAJV,wBAQA,cAACL,EAAD,CACEE,SAAoB,YAAVZ,EAAsB,MAAQ,OACxCe,QAAQ,SAFV,mBAMA,cAACL,EAAD,CACEE,SAAoB,UAAVZ,EAAoB,MAAQ,OACtCe,QAAQ,SAFV,qBAMA,cAACP,EAAD,CAAcQ,KAAK,SAASC,GAAG,SAASC,MAAM,GAAGb,SAAUA,Q,iBC1G3Dc,EAAiBtB,IAAOC,IAAV,qFAMdsB,EAAQvB,IAAOc,MAAV,kFAMLU,EAAWxB,IAAOyB,SAAV,+NA8BCC,I,MAAAA,EAXf,SAAuBT,GAAe,IAC5BH,EAAyCG,EAAzCH,MAAOa,EAAkCV,EAAlCU,KADoB,EACcV,EAA5BW,YADc,MACP,EADO,EACDC,EADC,YACcZ,EADd,yBAGnC,OACE,eAACK,EAAD,WACE,cAACC,EAAD,CAAOL,QAASS,EAAhB,SAAuBb,IACvB,cAACU,EAAD,2BAAcK,GAAd,IAA0BT,GAAIO,EAAMA,KAAMA,EAAMC,KAAMA,SCrCtDN,EAAiBtB,IAAOC,IAAV,qFAMdsB,EAAQvB,IAAOc,MAAV,kFAMLgB,EAAQ9B,IAAOY,MAAV,8MA4BImB,I,cAAAA,EAXf,SAAmBd,GAAe,IACxBH,EAA+BG,EAA/BH,MAAOa,EAAwBV,EAAxBU,KAASE,EADO,YACQZ,EADR,kBAG/B,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAOC,QAASS,EAAhB,SAAuBb,IACvB,cAACgB,EAAD,2BAAWD,GAAX,IAAuBT,GAAIO,EAAMA,KAAMA,EAAMR,KAAK,cCrBxD,IAAMa,EAAOhC,IAAOC,IAAV,k2BAkCJF,EAAYC,YAAOiC,IAAPjC,CAAH,yEAKTkC,EAAQlC,IAAOmC,GAAV,8EAMLC,EAAYpC,IAAOqC,EAAV,wFAMTC,EAAYtC,IAAOqC,EAAV,gEAKTE,EAAqBvC,IAAOC,IAAV,8DAKlBuC,GAAkBxC,YAAOyC,IAAPzC,CAAH,yGA+JN0C,UAzJf,WAAqB,IAAD,EACsBC,mBAAS,SAD/B,mBACXC,EADW,KACGC,EADH,OAEgCF,oBAAS,GAFzC,mBAEXG,EAFW,KAEQC,EAFR,KAGZC,EAAeC,iBAAkB,MAiCvC,OACE,cAACjB,EAAD,UACE,eAAC,EAAD,CAAWZ,GAAG,WAAW8B,SAAS,KAAlC,UACE,cAAChB,EAAD,wBACA,cAACE,EAAD,0GAIA,cAAC,IAAD,CACEe,cAAe,CACbxB,KAAM,GACNyB,MAAO,GACPC,QAAS,GACTC,UAAW,IAEbC,gBAAgB,EAChBC,kBAAkB,EAClBC,SAAU,SAACC,GACT,IA9HWN,EA8HLO,EAAc,GAkBpB,OAhBKD,EAAO/B,OACVgC,EAAOhC,KAAO,YAjILyB,EAmIQM,EAAON,MAlItB,4CACDQ,KAAKR,KAkINO,EAAOP,MAAQ,iBAEZM,EAAON,QACVO,EAAOP,MAAQ,YAEZM,EAAOL,UACVM,EAAON,QAAU,YAEdK,EAAOJ,YACVK,EAAOL,WAAY,GAGdK,GAETE,SArEiB,SAACH,EAAD,GAAsC,IAAtBI,EAAqB,EAArBA,UACvCjB,EAAgB,WAChBE,GAAqB,GAErBgB,IACGC,KACC,kBACA,mBACAN,EACA,8BAEDO,MACC,SAACC,GACCrB,EAAgB,WAChBiB,IACAK,YAAW,WAAO,IAAD,EACftB,EAAgB,SAChB,UAAAG,EAAaoB,eAAb,SAAsBC,UACrB,QAEL,SAAChE,GAAW,IAAD,EACTwC,EAAgB,SAChBE,GAAqB,GACrBoB,YAAW,WACTtB,EAAgB,WACf,KACH,UAAAG,EAAaoB,eAAb,SAAsBC,YAaxB,SAgCG,gBACCX,EADD,EACCA,OACAC,EAFD,EAECA,OACAW,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,aACAC,EAND,EAMCA,cAND,OAQC,sBACEC,aAAa,MACbC,UAAU,eACVd,SAAUW,EAHZ,SAKE,eAAC/B,EAAA,EAAD,CAAMmC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACpC,EAAA,EAAD,CAAMqC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,EAAD,CACElE,MAAM,OACNa,KAAK,OACLsD,SAAUV,EACVlD,MAAOqC,EAAO/B,SAGlB,cAACc,EAAA,EAAD,CAAMqC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,EAAD,CACElE,MAAM,QACNa,KAAK,QACLsD,SAAUV,EACVlD,MAAOqC,EAAON,UAGlB,cAACX,EAAA,EAAD,CAAMqC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,EAAD,CACEjE,MAAM,UACNa,KAAK,UACLsD,SAAUV,EACV3C,KAAM,EACNP,MAAOqC,EAAOL,YAGlB,cAACd,EAAD,UACE,cAAC,IAAD,CACE2C,IAAKlC,EAELmC,QAAQ,2CACRF,SAAU,SAACG,GACTX,EAAc,YAAaW,QAIjC,eAAC5C,GAAD,CAAiBsC,MAAI,EAACC,GAAI,GAA1B,UACE,cAAC,EAAD,CACE5E,MAAOyC,EACPpC,SAA2B,UAAjBoC,IAEZ,cAACN,EAAD,UACmB,aAAhBqB,EAAOhC,MACS,aAAjBgC,EAAOP,OACY,aAAnBO,EAAON,QACH,sBACiB,kBAAjBM,EAAOP,MACP,wBACAN,EACA,kFACAa,EAAOL,WAAagB,EAAQhB,UAC5B,iBACA","file":"static/js/8.0588c3db.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled, { css, keyframes } from \"styled-components\";\r\n\r\ninterface ButtonProps {\r\n  disabled: boolean;\r\n  state: string;\r\n}\r\n\r\ninterface LabelProps {\r\n  position: string;\r\n}\r\n\r\nconst errorAnim = keyframes`\r\n  0% { transform: translateX(8px); }\r\n  20% { transform: translateX(-8px); }\r\n  40% { transform: translateX(4px); }\r\n  60% { transform: translateX(-4px); }\r\n  80% { transform: translateX(2px); }\r\n  100% { transform: translateX(0px); }\r\n`;\r\n\r\nconst Container = styled.div<ButtonProps>`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 48px;\r\n  width: 160px;\r\n\r\n  transition: 0.2s all;\r\n  border-radius: 48px;\r\n  box-shadow: 0px 3px 16px 5px rgba(0, 0, 0, 0.1);\r\n  background-color: ${({ theme, state }) =>\r\n    state === \"Success\"\r\n      ? theme.success\r\n      : state === \"Error\"\r\n      ? theme.error\r\n      : theme.color4.main};\r\n  ${({ disabled, theme }) =>\r\n    !disabled &&\r\n    css`\r\n      &:hover {\r\n        background-color: ${theme.color4.dark};\r\n        transform: scale(1.08);\r\n      }\r\n    `}\r\n  overflow: hidden;\r\n  ${({ state }) =>\r\n    state === \"Error\" &&\r\n    css`\r\n      animation: 0.4s ${errorAnim} linear 0.35s;\r\n    `}\r\n`;\r\n\r\nconst StyledSubmit = styled.input`\r\n  flex: 1;\r\n  height: 100%;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background-color: transparent;\r\n  z-index: 1;\r\n`;\r\n\r\nconst StyledLabel = styled.label<LabelProps>`\r\n  position: absolute;\r\n  transition: 0.3s all cubic-bezier(0.83, 0, 0.17, 1);\r\n  font-size: 18px;\r\n  color: #fff;\r\n  font-weight: 500;\r\n  transform: translateY(${({ position }) => position});\r\n`;\r\n\r\ninterface Props extends React.HTMLProps<HTMLButtonElement> {\r\n  disabled?: boolean;\r\n  state?: string;\r\n}\r\n\r\nfunction SubmitButton(props: Props) {\r\n  const { disabled = false, state = \"Ready\" } = props;\r\n\r\n  return (\r\n    <Container state={state} disabled={disabled}>\r\n      <StyledLabel\r\n        position={state === \"Ready\" ? \"0px\" : \"-50px\"}\r\n        htmlFor=\"submit\"\r\n      >\r\n        Send\r\n      </StyledLabel>\r\n      <StyledLabel\r\n        position={\r\n          state === \"Ready\" ? \"50px\" : state === \"Loading\" ? \"0px\" : \"-50px\"\r\n        }\r\n        htmlFor=\"submit\"\r\n      >\r\n        Sending...\r\n      </StyledLabel>\r\n      <StyledLabel\r\n        position={state === \"Success\" ? \"0px\" : \"50px\"}\r\n        htmlFor=\"submit\"\r\n      >\r\n        Done!\r\n      </StyledLabel>\r\n      <StyledLabel\r\n        position={state === \"Error\" ? \"0px\" : \"50px\"}\r\n        htmlFor=\"submit\"\r\n      >\r\n        Failed!\r\n      </StyledLabel>\r\n      <StyledSubmit type=\"submit\" id=\"submit\" value=\"\" disabled={disabled} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default SubmitButton;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst InputContainer = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  padding: 8px;\r\n  color: #fff;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  flex: 1;\r\n  padding: 16px;\r\n  font: inherit;\r\n  border-radius: 8px;\r\n  border: none;\r\n  box-shadow: 0px 3px 16px 5px rgba(0, 0, 0, 0.1);\r\n  resize: none;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\ninterface Props extends React.HTMLProps<HTMLTextAreaElement> {\r\n  label: string;\r\n  rows?: number;\r\n  as?: undefined; // This is for handling type differences between styled components input and extended input props\r\n}\r\n\r\nfunction TextAreaInput(props: Props) {\r\n  const { label, name, rows = 1, ...otherProps } = props;\r\n\r\n  return (\r\n    <InputContainer>\r\n      <Label htmlFor={name}>{label}</Label>\r\n      <TextArea {...otherProps} id={name} name={name} rows={rows} />\r\n    </InputContainer>\r\n  );\r\n}\r\n\r\nexport default TextAreaInput;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst InputContainer = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  padding: 8px;\r\n  color: #fff;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  flex: 1;\r\n  padding: 16px;\r\n  font: inherit;\r\n  border-radius: 8px;\r\n  border: none;\r\n  box-shadow: 0px 3px 16px 5px rgba(0, 0, 0, 0.1);\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\ninterface Props extends React.HTMLProps<HTMLInputElement> {\r\n  label: string;\r\n  as?: undefined; // This is for handling type differences between styled components input and extended input props\r\n}\r\n\r\nfunction TextInput(props: Props) {\r\n  const { label, name, ...otherProps } = props;\r\n\r\n  return (\r\n    <InputContainer>\r\n      <Label htmlFor={name}>{label}</Label>\r\n      <Input {...otherProps} id={name} name={name} type=\"text\" />\r\n    </InputContainer>\r\n  );\r\n}\r\n\r\nexport default TextInput;\r\n","import React, { useRef, useState } from \"react\";\r\nimport emailjs from \"emailjs-com\";\r\nimport { Formik } from \"formik\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport styled from \"styled-components\";\r\nimport MUIContainer from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport TextAreaInput from \"./TextAreaInput\";\r\nimport TextInput from \"./TextInput\";\r\n\r\nfunction validateEmail(email: string) {\r\n  const regEx = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\r\n  return regEx.test(email);\r\n}\r\n\r\nconst Root = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #6e58d7;\r\n  padding: 96px 0 24px 0;\r\n  @media (min-width: 600px) {\r\n    padding: 96px 0 24px 0;\r\n  }\r\n  @media (min-width: 960px) {\r\n    padding: 120px 0 36px 0;\r\n  }\r\n  @media (min-width: 1280px) {\r\n    padding: 144px 0 48px 0;\r\n  }\r\n  @media (min-width: 1920px) {\r\n    padding: 192px 0 72px 0;\r\n  }\r\n\r\n  clip-path: polygon(0 0, 100% 48px, 100% 100%, 0 100%);\r\n  @media (min-width: 600px) {\r\n    clip-path: polygon(0 0, 100% 48px, 100% 100%, 0 100%);\r\n  }\r\n  @media (min-width: 960px) {\r\n    clip-path: polygon(0 0, 100% 60px, 100% 100%, 0 100%);\r\n  }\r\n  @media (min-width: 1280px) {\r\n    clip-path: polygon(0 0, 100% 72px, 100% 100%, 0 100%);\r\n  }\r\n  @media (min-width: 1920px) {\r\n    clip-path: polygon(0 0, 100% 96px, 100% 100%, 0 100%);\r\n  }\r\n`;\r\n\r\nconst Container = styled(MUIContainer)`\r\n  flex-direction: column;\r\n  padding: 24px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 44px;\r\n  color: #fff;\r\n  margin: 0;\r\n`;\r\n\r\nconst Paragraph = styled.p`\r\n  margin-bottom: 32px;\r\n  font-size: 18px;\r\n  color: #fff;\r\n`;\r\n\r\nconst ErrorText = styled.p`\r\n  color: #fff;\r\n  max-width: 50vw;\r\n`;\r\n\r\nconst RecaptchaContainer = styled.div`\r\n  padding: 8px;\r\n  height: 80px;\r\n`;\r\n\r\nconst SubmitContainer = styled(Grid)`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n`;\r\n\r\nfunction Section4() {\r\n  const [loadingState, setLoadingState] = useState(\"Ready\");\r\n  const [sendMessageFailed, setSendMessageFailed] = useState(false);\r\n  const recaptchaRef = useRef<ReCAPTCHA>(null);\r\n\r\n  const handleFormSubmit = (values: any, { resetForm }: any) => {\r\n    setLoadingState(\"Loading\");\r\n    setSendMessageFailed(false);\r\n\r\n    emailjs\r\n      .send(\r\n        \"service_julervm\",\r\n        \"template_ta50vl9\",\r\n        values,\r\n        \"user_NLsJL6dc9TUARPhYsGhR7\",\r\n      )\r\n      .then(\r\n        (result) => {\r\n          setLoadingState(\"Success\");\r\n          resetForm();\r\n          setTimeout(() => {\r\n            setLoadingState(\"Ready\");\r\n            recaptchaRef.current?.reset();\r\n          }, 2000);\r\n        },\r\n        (error) => {\r\n          setLoadingState(\"Error\");\r\n          setSendMessageFailed(true);\r\n          setTimeout(() => {\r\n            setLoadingState(\"Ready\");\r\n          }, 2000);\r\n          recaptchaRef.current?.reset();\r\n        },\r\n      );\r\n  };\r\n\r\n  return (\r\n    <Root>\r\n      <Container id=\"section4\" maxWidth=\"md\">\r\n        <Title>Say hello</Title>\r\n        <Paragraph>\r\n          You can contact me using this form or via any of my social media.\r\n          Links can be found below.\r\n        </Paragraph>\r\n        <Formik\r\n          initialValues={{\r\n            name: \"\",\r\n            email: \"\",\r\n            message: \"\",\r\n            recaptcha: \"\",\r\n          }}\r\n          validateOnBlur={false}\r\n          validateOnChange={false}\r\n          validate={(values) => {\r\n            const errors: any = {};\r\n\r\n            if (!values.name) {\r\n              errors.name = \"Required\";\r\n            }\r\n            if (!validateEmail(values.email)) {\r\n              errors.email = \"Invalid email\";\r\n            }\r\n            if (!values.email) {\r\n              errors.email = \"Required\";\r\n            }\r\n            if (!values.message) {\r\n              errors.message = \"Required\";\r\n            }\r\n            if (!values.recaptcha) {\r\n              errors.recaptcha = true;\r\n            }\r\n\r\n            return errors;\r\n          }}\r\n          onSubmit={handleFormSubmit}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleSubmit,\r\n            setFieldValue,\r\n          }) => (\r\n            <form\r\n              autoComplete=\"off\"\r\n              className=\"contact-form\"\r\n              onSubmit={handleSubmit}\r\n            >\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextInput\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    onChange={handleChange}\r\n                    value={values.name}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextInput\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    onChange={handleChange}\r\n                    value={values.email}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextAreaInput\r\n                    label=\"Message\"\r\n                    name=\"message\"\r\n                    onChange={handleChange}\r\n                    rows={5}\r\n                    value={values.message}\r\n                  />\r\n                </Grid>\r\n                <RecaptchaContainer>\r\n                  <ReCAPTCHA\r\n                    ref={recaptchaRef}\r\n                    // sitekey=\"6Lc4IpQaAAAAAAe-vaTYTq-t302gUQhAOr-b9FwE\"\r\n                    sitekey=\"6LdFOZQaAAAAAIIO2KjbjhrP1ITWWWjoDS-SK8XA\"\r\n                    onChange={(response) => {\r\n                      setFieldValue(\"recaptcha\", response);\r\n                    }}\r\n                  />\r\n                </RecaptchaContainer>\r\n                <SubmitContainer item xs={12}>\r\n                  <SubmitButton\r\n                    state={loadingState}\r\n                    disabled={loadingState !== \"Ready\"}\r\n                  />\r\n                  <ErrorText>\r\n                    {errors.name === \"Required\" ||\r\n                    errors.email === \"Required\" ||\r\n                    errors.message === \"Required\"\r\n                      ? \"Fill all the fields\"\r\n                      : errors.email === \"Invalid email\"\r\n                      ? \"Invalid email address\"\r\n                      : sendMessageFailed\r\n                      ? \"Something went wrong. Please try again or contact me via any of my social media\"\r\n                      : errors.recaptcha && touched.recaptcha\r\n                      ? \"Captcha failed\"\r\n                      : \"\"}\r\n                  </ErrorText>\r\n                </SubmitContainer>\r\n              </Grid>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </Container>\r\n    </Root>\r\n  );\r\n}\r\n\r\nexport default Section4;\r\n"],"sourceRoot":""}