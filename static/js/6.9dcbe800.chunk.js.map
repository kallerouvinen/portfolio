{"version":3,"sources":["components/sections/menu/MenuIcon.tsx","components/sections/menu/Menu.tsx"],"names":["inBezier","outBezier","Icon","styled","span","isOpen","css","MenuIcon","props","springWobbly","t","Math","sin","cos","lerp","a","b","p","size","ButtonContainer","div","ToggleMenuButton","button","MenuLink","MenuLinkContainer","MenuContainer","shouldAnimate","openMenu","closeMenu","keyframes","start","end","anim","i","height","width","wobblyAnimation","Menu","useState","setIsOpen","enableAnimations","useRef","menuEl","toggleButtonEl","useEffect","setTimeout","current","handleClickOutside","useCallback","event","contains","target","document","addEventListener","removeEventListener","window","onscroll","scrollToSection","number","getElementById","scrollIntoView","behavior","ref","onClick","aria-label"],"mappings":"yIAGMA,EAAW,sCACXC,EAAY,kCAMZC,EAAOC,IAAOC,KAAV,orBAOqBJ,EAUDA,EAAiCA,EAWpCA,EAAiCA,GAGxD,qBAAGK,QAEHC,YADM,0YAEyBL,EAGDA,EAA6BA,EAKhCA,EAA6BA,MAiB7CM,I,sBAAAA,EANf,SAAkBC,GAAe,IAAD,EACHA,EAAnBH,cADsB,SAG9B,OAAO,cAACH,EAAD,CAAMG,OAAQA,KC7DjBI,EAAe,SAACC,GACpB,OACG,GAAD,SACA,SAAa,EAAIA,KACf,EAAD,SAAK,QAAY,EAAIA,GAAKC,KAAKC,IAAI,GAAKF,GAAK,EAAIC,KAAKE,IAAI,GAAKH,KAI9DI,EAAO,SAACC,EAAWC,EAAWC,GAClC,OAAOF,EAAIE,GAAKD,EAAID,IAehBG,EAAO,IAEPC,EAAkBhB,IAAOiB,IAAV,8EAUfC,EAAmBlB,IAAOmB,OAAV,sbAYN,qBAAGjB,QACJC,YAAX,gEAaEiB,EAAWpB,IAAOmB,OAAV,8VAyBRE,EAAoBrB,IAAOiB,IAAV,8TAaV,qBAAGf,OAAuB,EAAI,KAC3B,qBAAGA,OACN,yBAA2B,gBAQlCoB,EAAgBtB,IAAOiB,IAAV,iSAOYF,KAIhB,gBAAGb,EAAH,EAAGA,OAAQqB,EAAX,EAAWA,cAAX,OACXrB,EACIC,YADE,wDAEEqB,GAEJD,EACApB,YADa,wDAETsB,GAEJtB,YAJa,6BAKI,qBAAGD,OAAuB,WAAa,UAG1DsB,EAAWE,YAAH,4BA1HU,SAACC,EAAeC,GAGtC,IADA,IAAMC,EAAY,GACTC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,IACMhB,EAAIR,EADAwB,EAAI,KAERf,EAAOJ,EAAKgB,EAAOC,EAAKd,GAC9Be,EAAK,GAAD,OAAIC,EAAJ,MAAY,CAAEC,OAAQhB,EAAMiB,MAAOjB,GAEzC,OAAOc,EAiHoBI,CAAgB,EAAGlB,IAC1CU,EAAYC,YAAH,iGACCX,EAAmBA,GAkFpBmB,UA9Ef,WAAiB,IAAD,EACcC,oBAAS,GADvB,mBACPjC,EADO,KACCkC,EADD,KAERC,EAAmBC,kBAAO,GAC1BC,EAASD,iBAAuB,MAChCE,EAAiBF,iBAA0B,MAEjDG,qBAAU,WACRC,YAAW,WACTL,EAAiBM,SAAU,IAC1B,KACF,IAEH,IAAMC,EAAqBC,uBAAY,SAACC,GAAuB,IAAD,KAE1D,UAACP,EAAOI,eAAR,aAAC,EAAgBI,SAASD,EAAME,WAChC,UAACR,EAAeG,eAAhB,aAAC,EAAwBI,SAASD,EAAME,UAExCvB,MAED,IAEHgB,qBAAU,WAER,OADAQ,SAASC,iBAAiB,YAAaN,GAChC,WACLK,SAASE,oBAAoB,YAAaP,MAE3C,CAACA,IAEJ,IAAMnB,EAAY,WAChB2B,OAAOC,SAAW,KAClBjB,GAAU,IAQNkB,EAAkB,SAACC,GAAoB,IAAD,EAC1C,UAAAN,SACGO,eADH,iBAC4BD,WAD5B,SAEIE,eAAe,CAAEC,SAAU,WAC/BtB,GAAU,IAQZ,OACE,qCACE,cAACd,EAAD,CACEqC,IAAKpB,EACLrC,OAAQA,EACRqB,cAAec,EAAiBM,QAHlC,SAKE,eAACtB,EAAD,CAAmBnB,OAAQA,EAA3B,UACE,cAACkB,EAAD,CAAUwC,QAbO,kBAAMN,EAAgB,IAavC,kBACA,cAAClC,EAAD,CAAUwC,QAbO,kBAAMN,EAAgB,IAavC,mBACA,cAAClC,EAAD,CAAUwC,QAbO,kBAAMN,EAAgB,IAavC,qBACA,cAAClC,EAAD,CAAUwC,QAbO,kBAAMN,EAAgB,IAavC,0BAGJ,cAACtC,EAAD,UACE,cAACE,EAAD,CACEyC,IAAKnB,EACLqB,aAAW,cACXD,QAnCW,WACjBxB,GAAWlC,GACXkD,OAAOC,SAAWnD,EAAS,KAAOuB,GAkC5BvB,OAAQA,EAJV,SAME,cAAC,EAAD,CAAUA,OAAQA","file":"static/js/6.9dcbe800.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst inBezier = \"cubic-bezier(0.55, 0.05, 0.67, 0.2)\";\r\nconst outBezier = \"cubic-bezier(0.2, 0.6, 0.35, 1)\";\r\n\r\ninterface IconProps {\r\n  isOpen: boolean;\r\n}\r\n\r\nconst Icon = styled.span<IconProps>`\r\n  position: absolute;\r\n  display: block;\r\n  width: 24px;\r\n  height: 3px;\r\n  background-color: #fff;\r\n  border-radius: 2px;\r\n  transition: transform 0.2s ${inBezier};\r\n  &::before {\r\n    position: absolute;\r\n    display: block;\r\n    bottom: 8px;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #fff;\r\n    border-radius: 2px;\r\n    content: \"\";\r\n    transition: bottom 0.1s ${inBezier} 0.2s, transform 0.2s ${inBezier};\r\n  }\r\n  &::after {\r\n    position: absolute;\r\n    display: block;\r\n    top: 8px;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #fff;\r\n    border-radius: 2px;\r\n    content: \"\";\r\n    transition: top 0.1s ${inBezier} 0.2s, transform 0.2s ${inBezier};\r\n  }\r\n\r\n  ${({ isOpen }) =>\r\n    isOpen &&\r\n    css`\r\n      transition: transform 0.2s ${outBezier} 0.1s;\r\n      transform: rotate(135deg);\r\n      &::before {\r\n        transition: bottom 0.1s ${outBezier}, transform 0.2s ${outBezier} 0.1s;\r\n        bottom: 0;\r\n        transform: rotate(90deg);\r\n      }\r\n      &::after {\r\n        transition: top 0.1s ${outBezier}, transform 0.2s ${outBezier} 0.1s;\r\n        top: 0;\r\n        transform: rotate(90deg);\r\n      }\r\n    `}\r\n`;\r\n\r\ninterface Props {\r\n  isOpen?: boolean;\r\n}\r\n\r\nfunction MenuIcon(props: Props) {\r\n  const { isOpen = false } = props;\r\n\r\n  return <Icon isOpen={isOpen} />;\r\n}\r\n\r\nexport default MenuIcon;\r\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport styled, { css, keyframes } from \"styled-components\";\r\n\r\nimport MenuIcon from \"./MenuIcon\";\r\n\r\nconst springWobbly = (t: number) => {\r\n  return (\r\n    -0.5 *\r\n    2.71828 ** (-6 * t) *\r\n    (-2 * 2.71828 ** (6 * t) + Math.sin(12 * t) + 2 * Math.cos(12 * t))\r\n  );\r\n};\r\n\r\nconst lerp = (a: number, b: number, p: number) => {\r\n  return a + p * (b - a);\r\n};\r\n\r\nconst wobblyAnimation = (start: number, end: number) => {\r\n  // TODO: Type\r\n  const anim: any = {};\r\n  for (let i = 0; i < 101; i++) {\r\n    const t = i / 100;\r\n    const p = springWobbly(t);\r\n    const size = lerp(start, end, p);\r\n    anim[`${i}%`] = { height: size, width: size };\r\n  }\r\n  return anim;\r\n};\r\n\r\nconst size = 450;\r\n\r\nconst ButtonContainer = styled.div`\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 20px;\r\n`;\r\n\r\ninterface ToggleMenuButtonProps {\r\n  isOpen: boolean;\r\n}\r\n\r\nconst ToggleMenuButton = styled.button<ToggleMenuButtonProps>`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  width: 56px;\r\n  height: 56px;\r\n  border-radius: 48px;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: 0.3s all;\r\n  background-color: #3f5efb;\r\n  box-shadow: ${({ isOpen }) =>\r\n    !isOpen && css`0px 3px 16px 5px rgba(0, 0, 0, 0.1)`};\r\n  & > * {\r\n    color: #fff;\r\n    font-size: 32px;\r\n  }\r\n  &:hover {\r\n    background-color: #284bfb;\r\n  }\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst MenuLink = styled.button`\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: 0.2s all;\r\n  background-color: transparent;\r\n  width: 150px;\r\n  padding: 0;\r\n  &:hover {\r\n    transform: scale(1.08);\r\n    & > * {\r\n      color: #fff;\r\n    }\r\n  }\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  color: #cdd5fe;\r\n  font-size: 28px;\r\n  text-transform: uppercase;\r\n`;\r\n\r\ninterface MenuLinkContainerProps {\r\n  isOpen: boolean;\r\n}\r\n\r\nconst MenuLinkContainer = styled.div<MenuLinkContainerProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n  padding-top: 64px;\r\n  padding-right: calc(45vw - 75px);\r\n  @media (min-width: 400px) {\r\n    padding-right: 105px;\r\n  }\r\n  text-align: center;\r\n  & > * {\r\n    margin: 12px 0;\r\n  }\r\n  opacity: ${({ isOpen }) => (isOpen ? 1 : 0)};\r\n  transition: ${({ isOpen }) =>\r\n    isOpen ? \"opacity 0.2s ease 0.3s\" : \"opacity 0s\"};\r\n`;\r\n\r\ninterface MenuContainerProps {\r\n  isOpen: boolean;\r\n  shouldAnimate: boolean;\r\n}\r\n\r\nconst MenuContainer = styled.div<MenuContainerProps>`\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  width: 0;\r\n  height: 0;\r\n  background-color: #3f5efb;\r\n  border-bottom-left-radius: ${size - 25}px;\r\n  overflow: hidden;\r\n  box-shadow: -3px 3px 16px 5px rgba(0, 0, 0, 0.1);\r\n\r\n  animation: ${({ isOpen, shouldAnimate }) =>\r\n    isOpen\r\n      ? css`\r\n          ${openMenu} 400ms\r\n        `\r\n      : shouldAnimate\r\n      ? css`\r\n          ${closeMenu} 300ms\r\n        `\r\n      : css``};\r\n  animation-fill-mode: ${({ isOpen }) => (isOpen ? \"forwards\" : \"none\")};\r\n`;\r\n\r\nconst openMenu = keyframes`${wobblyAnimation(0, size)}`;\r\nconst closeMenu = keyframes`\r\n  0% { width: ${size}px; height: ${size}px }\r\n  100% { width: 0; height: 0 }\r\n`;\r\n\r\nfunction Menu() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const enableAnimations = useRef(false);\r\n  const menuEl = useRef<HTMLDivElement>(null);\r\n  const toggleButtonEl = useRef<HTMLButtonElement>(null);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      enableAnimations.current = true;\r\n    }, 5);\r\n  }, []);\r\n\r\n  const handleClickOutside = useCallback((event: MouseEvent) => {\r\n    if (\r\n      !menuEl.current?.contains(event.target as Node) &&\r\n      !toggleButtonEl.current?.contains(event.target as Node)\r\n    ) {\r\n      closeMenu();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [handleClickOutside]);\r\n\r\n  const closeMenu = () => {\r\n    window.onscroll = null;\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const toggleMenu = () => {\r\n    setIsOpen(!isOpen);\r\n    window.onscroll = isOpen ? null : closeMenu;\r\n  };\r\n\r\n  const scrollToSection = (number: number) => {\r\n    document\r\n      .getElementById(`section${number}`)\r\n      ?.scrollIntoView({ behavior: \"smooth\" });\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const scrollToSection1 = () => scrollToSection(1);\r\n  const scrollToSection2 = () => scrollToSection(2);\r\n  const scrollToSection3 = () => scrollToSection(3);\r\n  const scrollToSection4 = () => scrollToSection(4);\r\n\r\n  return (\r\n    <>\r\n      <MenuContainer\r\n        ref={menuEl}\r\n        isOpen={isOpen}\r\n        shouldAnimate={enableAnimations.current}\r\n      >\r\n        <MenuLinkContainer isOpen={isOpen}>\r\n          <MenuLink onClick={scrollToSection1}>Home</MenuLink>\r\n          <MenuLink onClick={scrollToSection2}>About</MenuLink>\r\n          <MenuLink onClick={scrollToSection3}>My work</MenuLink>\r\n          <MenuLink onClick={scrollToSection4}>Contact</MenuLink>\r\n        </MenuLinkContainer>\r\n      </MenuContainer>\r\n      <ButtonContainer>\r\n        <ToggleMenuButton\r\n          ref={toggleButtonEl}\r\n          aria-label=\"toggle-menu\"\r\n          onClick={toggleMenu}\r\n          isOpen={isOpen}\r\n        >\r\n          <MenuIcon isOpen={isOpen} />\r\n        </ToggleMenuButton>\r\n      </ButtonContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n"],"sourceRoot":""}